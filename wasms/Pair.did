type Amount = nat;
type Time = int;
type Address = text;
type Sa = vec nat8;
type Nonce = nat;
type Txid = blob;
type Data = vec nat8;
type AccountId = blob;
type CyclesWallet = principal;
type IcpE8s = nat;
type Timestamp = nat;
type Toid = nat;
type Ttid = nat;
type Quantity = nat;
type Price = nat;
type Account = record { owner : principal; subaccount : opt vec nat8 };
type ICRC1Account = record { owner : principal; subaccount : opt blob };
type IDOSetting = record {
  IDOSupplies : vec record { supply : Amount; price : nat };
  IDOWhitelistEnabled : bool;
  IDOOpeningTime : Time;
  IDOTotalSupply : record { IDOSupply : Amount; percentageOfTotal : float64 };
  IDOEnabled : bool;
  IDOLimitPerAccount : Amount;
  IDOClosingTime : Time;
};
type IDORequirement = record {
  threshold : float64;
  pairs : vec record { pair : principal; token1ToUsdRatio : float64 };
};
type Participant = record {
   historyVol: float64;
   limit: Amount;
   updatedTime: Time;
   used: Amount;
};
type KeepingBalance = record {
  token0 : record { locked : Amount; available : Amount };
  token1 : record { locked : Amount; available : Amount };
};
type AccountSetting = record {
  enPoolMode : bool;
  modeSwitchHistory : vec record { Nonce; Nonce };
  start : opt Nonce;
  enKeepingBalance : bool;
};
type Status = variant {
  Failed;
  Cancelled;
  PartiallyCompletedAndCancelled;
  Completed;
  Pending;
};
type ShareChange = variant { Burn : Shares; Mint : Shares; NoChange };
type Shares = nat;
type BalanceChange = variant {
  DebitRecord : nat;
  CreditRecord : nat;
  NoChange;
};
type TokenType = variant { Icp; Token : principal; Cycles };
type OperationType = variant { AddLiquidity; Swap; Claim; RemoveLiquidity };
type TxnRecord = record {
  fee : record { token0Fee : int; token1Fee : int };
  status : Status;
  shares : ShareChange;
  msgCaller : opt principal;
  order : record {
    token0Value : opt BalanceChange;
    token1Value : opt BalanceChange;
  };
  data : opt Data;
  time : Time;
  txid : Txid;
  orderMode : variant { AMM; OrderBook };
  orderType : opt variant { FAK; FOK; LMT; MKT };
  filled : record {
    token0Value : BalanceChange;
    token1Value : BalanceChange;
  };
  token0 : TokenType;
  token1 : TokenType;
  nonce : Nonce;
  operation : OperationType;
  account : AccountId;
  details : vec record {
    time : Time;
    token0Value : BalanceChange;
    counterparty : Txid;
    token1Value : BalanceChange;
  };
  caller : AccountId;
  index : nat;
  cyclesWallet : opt CyclesWallet;
};
type Vol = record { value0 : nat; value1 : nat };
type DRC207Support = record {
  timer : record { interval_seconds : opt nat; enable : bool };
  monitorable_by_self : bool;
  monitorable_by_blackhole : record {
    canister_id : opt principal;
    allowed : bool;
  };
  cycles_receivable : bool;
};
type DexSetting = record {
  MAX_TPS : nat;
  ICTC_RUN_INTERVAL : nat;
  MAKER_BONUS_RATE : nat;
  MAX_PENDINGS : nat;
  TRADING_FEE : nat;
  UNIT_SIZE : nat;
  STORAGE_INTERVAL : nat;
  ICP_FEE : IcpE8s;
};
type InitArgs = record {
  owner : opt principal;
  name : text;
  token0 : principal;
  token1 : principal;
  unitSize : nat64;
};
type KBar = record {
  kid : nat;
  low : nat;
  vol : Vol;
  high : nat;
  close : nat;
  open : nat;
  updatedTs : Timestamp;
};
type KInterval = nat;
type TxAccount = text;
type TokenInfo = record { principal; TokenSymbol; TokenStd };
type TokenStd = variant {
  dft;
  ext;
  icp;
  other : text;
  cycles;
  ledger;
  icrc1;
  dip20;
  drc20;
};
type TokenSymbol = text;
type OrderType = variant { FAK; FOK; LMT; MKT };
type OrderFilled = record {
  time : Time;
  token0Value : BalanceChange;
  counterparty : Txid;
  token1Value : BalanceChange;
};
type OrderSide = variant { Buy; Sell };
type PriceResponse = record { quantity : nat; price : nat };
type Liquidity = record {
  vol : Vol;
  shares : Amount;
  shareWeighted : record { updateTime : Timestamp; shareTimeWeighted : nat };
  unitValue : record { Amount; Amount };
  value0 : Amount;
  value1 : Amount;
  priceWeighted : PriceWeighted;
  swapCount : nat64;
};
type Liquidity2 = record {
  vol : Vol;
  shares : Amount;
  shareWeighted : record { updateTime : Timestamp; shareTimeWeighted : nat };
  unitValue : record { Amount; Amount };
  orderCount : nat64;
  token0 : Amount;
  token1 : Amount;
  priceWeighted : PriceWeighted;
  price : nat;
  userCount : nat64;
  unitSize : nat;
};
type PriceWeighted = record {
  updateTime : Timestamp;
  token1TimeWeighted : nat;
  token0TimeWeighted : nat;
};
type ListPage = nat;
type ListSize = nat;
type TrieList = record {
  total : nat;
  data : vec record { Txid; TradingOrder };
  totalPage : nat;
};
type SysMode = variant {
  DisabledTrading;
  ReadOnly;
  ClosingOnly;
  GeneralTrading;
};
type OrderStatusResponse = variant {
  Failed : TradingOrder;
  None;
  Completed : TxnRecord;
  Pending : TradingOrder;
};
type TradingOrder = record {
  fee : record { fee0 : int; fee1 : int };
  gas : record { gas0 : nat; gas1 : nat };
  status : TradingStatus;
  toids : vec Toid;
  data : opt vec nat8;
  time : Time;
  txid : Txid;
  icrc1Account : opt record { owner : principal; subaccount : opt vec nat8 };
  orderType : OrderType;
  filled : vec OrderFilled;
  expiration : Time;
  nonce : nat;
  account : AccountId;
  remaining : OrderPrice;
  index : nat;
  orderPrice : OrderPrice;
  refund : record { nat; nat; nat };
};
type OrderPrice = record {
  quantity : variant { Buy : record { Quantity; Amount }; Sell : Quantity };
  price : Price;
};
type TradingStatus = variant { Todo; Closed; Cancelled; Pending };
type PeriodNs = int;
type TradingResult = variant {
  ok : record { status : TradingStatus; txid : Txid; filled : vec OrderFilled };
  err : record {
    code : variant {
      NonceError;
      InvalidAmount;
      UndefinedError;
      UnacceptableVolatility;
      TransactionBlocking;
      InsufficientBalance;
      TransferException;
    };
    message : text;
  };
};
type DebitToken = principal;
type ICDexPair = service {
   IDO_getConfig: () -> (opt principal, IDOSetting, opt IDORequirement) query;
   IDO_qualification: (opt Address) -> (vec record { Address; Participant; }) query;
   accountBalance : (Address) -> (KeepingBalance) query;
   accountConfig : (variant { PoolMode; TunnelMode }, bool, opt Sa) -> ();
   accountSetting : (Address) -> (AccountSetting) query;
   cancel: (Nonce, opt Sa) -> ();
   cancelByTxid: (Txid, opt Sa) -> ();
   count: (opt Address) -> (nat) query;
   deposit : (variant { token0; token1 }, Amount, opt Sa) -> ();
   depositFallback : (opt Sa) -> (Amount, Amount);
   drc205_canisterId: () -> (principal) query;
   drc205_events: (opt Address) -> (vec TxnRecord) query;
   drc205_events_filter: (opt Address, opt Time, opt Time) -> (vec TxnRecord, bool) query;
   drc205_txn: (Txid) -> (opt TxnRecord) query;
   drc205_txn2: (Txid) -> (opt TxnRecord);
   drc207: () -> (DRC207Support) query;
   fallback: (Nonce, opt Sa) -> (bool);
   fallbackByTxid: (Txid, opt Sa) -> (bool);
   fee: () ->(record {
       maker: record { buy: float64; sell: float64; };
       taker: record { buy: float64; sell: float64; };
   }) query;
   getConfig: () -> (DexSetting) query;
   getQuotes: (KInterval) -> (vec KBar) query;
   getDepositAccount : (Address) -> (Account, Address) query;
   getTxAccount: (Address) -> (Account, TxAccount, Nonce, Txid) query;
   getRole : (Address) -> ( record { broker : bool; proTrader : bool; vipMaker : bool }, ) query;
   ictc_TM: () -> (text) query;
   ictc_getAdmins: () -> (vec principal) query;
   ictc_runTT: () -> (bool);
   info : () -> ( record {
        decimals : nat8;
        setting : DexSetting;
        owner : principal;
        name : text;
        version : text;
        token0 : TokenInfo;
        token1 : TokenInfo;
        paused : bool;
      }, ) query;
   latestFilled : () -> (
      vec record { Timestamp; Txid; OrderFilled; OrderSide },
    ) query;
   level10 : () -> (
      nat,
      record { ask : vec PriceResponse; bid : vec PriceResponse },
    ) query;
   level100 : () -> (
      nat,
      record { ask : vec PriceResponse; bid : vec PriceResponse },
    ) query;
   liquidity : (opt Address) -> (Liquidity) query;
   liquidity2 : (opt Address) -> (Liquidity2) query;
   makerRebate: (Address) -> (float64, float64) query;
   name: () -> (text) query;
   orderExpirationDuration: () -> (int) query;
   pending: (opt Address, opt ListPage, opt ListSize) -> (TrieList) query;
   pendingCount: () -> (nat) query;
   prepare: (Address) -> (TxAccount, Nonce) query;
   stats: () -> (record {
       change24h: float64;
       price: float64;
       totalVol: Vol;
       vol24h: Vol;
   }) query;
   status: (Address, Nonce) -> (OrderStatusResponse) query;
   statusByTxid: (Txid) -> (OrderStatusResponse) query;
   sysMode: () -> (record { mode: SysMode; openingTime: Time; }) query;
   ta_ambassador: (Address) -> (bool, text, nat, Vol) query;
   ta_description: () -> (text) query;
   ta_getReferrer: (Address) -> (opt record { Address; bool; }) query;
   ta_setReferrer: (Address, opt text, opt Sa) -> (bool);
   ta_stats: (opt text) -> (nat, nat, Vol) query;
   token0: () -> (TokenType, opt TokenStd) query;
   token1: () -> (TokenType, opt TokenStd) query;
   tradeCore: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data, 
   opt record { broker: principal; rate: float64; }, opt bool) -> (TradingResult);
   trade: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data) -> (TradingResult);
   trade_b: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa,
    opt Data, opt record { broker: principal; rate: float64; }) -> (TradingResult);
   tradeMKT: (DebitToken, Amount, opt Nonce, opt Sa, opt Data) -> (TradingResult);
   tradeMKT_b: (DebitToken, Amount, opt nat, opt Nonce, opt Sa, opt Data,
    opt record { broker: principal; rate: float64; }) -> (TradingResult);
   userCount: () -> (nat) query;
   version: () -> (text) query;
   withdraw : (opt Amount, opt Amount, opt Sa) -> (Amount, Amount);
   wallet_receive: () -> ();
};
service : (InitArgs, bool) -> ICDexPair
